services:
  zentry-api:
    image: zentry.api
    build:
      context: .
      dockerfile: src/Zentry.API/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_URLS=http://+:5000
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=zentry;Username=admin;Password=pass;
      # Other services
      - Redis_ConnectionString=redis:6379
      - MongoDB_ConnectionString=mongodb://admin:pass@mongodb:27017/zentry?authSource=admin
      - RabbitMQ_Host=rabbitmq
      - RabbitMQ_Username=admin
      - RabbitMQ_Password=pass
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 30s
      timeout: 3s
      retries: 3

  #  zentry-background:
  #    image: zentry.background
  #    build:
  #      context: .
  #      dockerfile: src/Zentry.BackgroundProcessor/Dockerfile
  #    environment:
  #      - ASPNETCORE_ENVIRONMENT=Development
  #      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=zentry;Username=admin;Password=pass
  #      - RabbitMQ__Host=rabbitmq
  #      - RabbitMQ__Username=admin
  #      - RabbitMQ__Password=pass
  #    depends_on:
  #      rabbitmq:
  #        condition: service_healthy
  #    healthcheck:
  #      test: ["CMD-SHELL", "python -c 'import pika' || exit 1"]
  #      interval: 30s
  #      timeout: 3s
  #      retries: 3

  #  zentry-python-worker:
  #    image: zentry.python-worker
  #    build:
  #      context: src/Zentry.BackgroundProcessor
  #      dockerfile: Dockerfile.python
  #    environment:
  #      - RabbitMQ__Host=rabbitmq
  #      - RabbitMQ__Username=admin
  #      - RabbitMQ__Password=pass
  #      - RABBITMQ_HOST=rabbitmq
  #      - RABBITMQ_USERNAME=admin
  #      - RABBITMQ_PASSWORD=pass
  #    depends_on:
  #      rabbitmq:
  #        condition: service_healthy
  #    healthcheck:
  #      test: ["CMD-SHELL", "python -c 'import pika' || exit 1"]
  #      interval: 30s
  #      timeout: 3s
  #      retries: 3

  redis:
    image: redis:7.4-alpine
    command: redis-server --maxmemory 500mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"  # Thêm port mapping cho Redis nếu cần truy cập từ bên ngoài
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3

  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=zentry
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=pass
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })", "--authenticationDatabase", "admin" ]
      interval: 30s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:16.4-alpine
    environment:
      - POSTGRES_DB=zentry
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=pass
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d zentry" ]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.0-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=pass
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  redis-data:
  mongodb-data:
  postgres-data:
