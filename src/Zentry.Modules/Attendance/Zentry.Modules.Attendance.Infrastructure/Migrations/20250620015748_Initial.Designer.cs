// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zentry.Modules.Attendance.Infrastructure.Persistence;

#nullable disable

namespace Zentry.Modules.Attendance.Infrastructure.Migrations
{
    [DbContext(typeof(AttendanceDbContext))]
    [Migration("20250620015748_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Zentry.Modules.Attendance.Domain.Entities.AttendanceRecord", b =>
                {
                    b.Property<Guid>("AttendanceRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EnrollmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uuid");

                    b.HasKey("AttendanceRecordId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("RoundId");

                    b.HasIndex("EnrollmentId", "RoundId")
                        .IsUnique()
                        .HasDatabaseName("IX_AttendanceRecords_EnrollmentId_RoundId");

                    b.ToTable("AttendanceRecords", (string)null);
                });

            modelBuilder.Entity("Zentry.Modules.Attendance.Domain.Entities.Enrollment", b =>
                {
                    b.Property<Guid>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique()
                        .HasDatabaseName("IX_Enrollments_StudentId_CourseId");

                    b.ToTable("Enrollments", (string)null);
                });

            modelBuilder.Entity("Zentry.Modules.Attendance.Domain.Entities.ErrorReport", b =>
                {
                    b.Property<Guid>("ErrorReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ErrorReportId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ErrorCode");

                    b.ToTable("ErrorReports", (string)null);
                });

            modelBuilder.Entity("Zentry.Modules.Attendance.Domain.Entities.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RoundId");

                    b.HasIndex("EndTime");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StartTime");

                    b.ToTable("Rounds", null, t =>
                        {
                            t.HasCheckConstraint("CK_Rounds_EndTime_After_StartTime", "\"EndTime\" > \"StartTime\"");
                        });
                });

            modelBuilder.Entity("Zentry.Modules.Attendance.Domain.Entities.AttendanceRecord", b =>
                {
                    b.HasOne("Zentry.Modules.Attendance.Domain.Entities.Enrollment", "Enrollment")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zentry.Modules.Attendance.Domain.Entities.Round", "Round")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Zentry.Modules.Attendance.Domain.Entities.Enrollment", b =>
                {
                    b.Navigation("AttendanceRecords");
                });

            modelBuilder.Entity("Zentry.Modules.Attendance.Domain.Entities.Round", b =>
                {
                    b.Navigation("AttendanceRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
