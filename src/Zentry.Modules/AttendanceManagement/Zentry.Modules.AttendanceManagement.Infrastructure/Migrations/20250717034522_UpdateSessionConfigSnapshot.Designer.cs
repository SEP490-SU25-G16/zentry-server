// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zentry.Modules.AttendanceManagement.Infrastructure.Persistence;

#nullable disable

namespace Zentry.Modules.AttendanceManagement.Infrastructure.Migrations
{
    [DbContext(typeof(AttendanceDbContext))]
    [Migration("20250717034522_UpdateSessionConfigSnapshot")]
    partial class UpdateSessionConfigSnapshot
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Zentry.Modules.AttendanceManagement.Domain.Entities.AttendanceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAbsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceRecords", (string)null);
                });

            modelBuilder.Entity("Zentry.Modules.AttendanceManagement.Domain.Entities.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientRequest")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("EndTime");

                    b.HasIndex("SessionId");

                    b.HasIndex("StartTime");

                    b.ToTable("Rounds", null, t =>
                        {
                            t.HasCheckConstraint("CK_Rounds_EndTime_After_StartTime", "\"EndTime\" > \"StartTime\"");
                        });
                });

            modelBuilder.Entity("Zentry.Modules.AttendanceManagement.Domain.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StartTime");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions", null, t =>
                        {
                            t.HasCheckConstraint("CK_Sessions_EndTime_After_StartTime", "\"EndTime\" > \"StartTime\"");
                        });
                });

            modelBuilder.Entity("Zentry.Modules.AttendanceManagement.Domain.Entities.Session", b =>
                {
                    b.OwnsOne("Zentry.Modules.AttendanceManagement.Domain.ValueObjects.SessionConfigSnapshot", "SessionConfigs", b1 =>
                        {
                            b1.Property<Guid>("SessionId")
                                .HasColumnType("uuid");

                            b1.Property<int>("AbsentReportGracePeriodHours")
                                .HasColumnType("integer");

                            b1.Property<int>("AttendanceWindowMinutes")
                                .HasColumnType("integer");

                            b1.Property<int>("ManualAdjustmentGracePeriodHours")
                                .HasColumnType("integer");

                            b1.Property<int>("TotalAttendanceRounds")
                                .HasColumnType("integer");

                            b1.HasKey("SessionId");

                            b1.ToTable("Sessions");

                            b1.ToJson("SessionConfigs");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.Navigation("SessionConfigs")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
